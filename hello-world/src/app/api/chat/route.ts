// This whole file was generated by Cline and AI.
import { VertexAI } from '@google-cloud/vertexai';

// Initialize Vertex with your Cloud project and location
const vertex_ai = new VertexAI({
    project: process.env.GOOGLE_CLOUD_PROJECT || '',
    location: 'us-central1',
});

const model = 'gemini-2.0-flash-exp';

export async function POST(request: Request) {
    try {
        const { name, weather, location } = await request.json();

        // Initialize generative model
        const generativeModel = vertex_ai.preview.getGenerativeModel({
            model: model,
            generationConfig: {
                maxOutputTokens: 100,
                temperature: 0.9,
            },
        });

        const prompt = `Create ONE short, contextual greeting for ${name} based on their current weather in ${location.city}.

Weather details:
- Temperature: ${weather.temperature}
- Wind Speed: ${weather.wind_speed}
- Humidity: ${weather.humidity}

Requirements:
- Must be exactly ONE greeting (4-8 words)
- Must include their name
- Must reference the weather or location
- Must be positive and uplifting
- Must end with an exclamation mark
- Be creative and engaging

Examples based on weather:
- Cold: "Stay warm in Boston, ${name}!"
- Hot: "Keep cool in Miami, ${name}!"
- Rainy: "Embrace the rain, ${name}!"

Return just the single greeting, nothing else.`;

        const result = await generativeModel.generateContent(prompt);
        const response = await result.response;
        // Validate and clean the response
        let text = response.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

        // Ensure the response ends with an exclamation mark
        if (!text) {
            text = `Welcome to ${location.city}, ${name}! It's ${weather.temperature} outside.`;
        } else if (!text.endsWith('!')) {
            text += '!';
        }

        // Ensure the response includes the name
        if (!text.includes(name)) {
            text = `${name}, ${text}`;
        }

        return new Response(JSON.stringify({ message: text }), {
            headers: { 'Content-Type': 'application/json' },
        });
    } catch (error) {
        console.error('Error:', error);
        return new Response(
            JSON.stringify({ error: 'Failed to generate response' }),
            {
                status: 500,
                headers: { 'Content-Type': 'application/json' },
            }
        );
    }
}
